AWSTemplateFormatVersion: '2010-09-09'
Description: 'Production Infrastructure for The Hair Collective Application'

Parameters:
    # Database Password
    DBPassword:
        Type: String
        Description: "The master password for The Hair Collective's RDS Database"
        NoEcho: true                                                                    # Hide password in consoles and logs
        MinLength: 8
        MaxLength: 41
        AllowedPattern: "^[a-zA-Z0-9@#$%^&+=]*$" 
        ConstraintDescription: "Password must be 8–41 characters and cannot contain '/', '@', '\"', or spaces." 
    
    # AMI ID
    LatestAmiId:
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    
    # S3 Access Key from S3.yaml
    S3AccessKeyId:
        Type: String
        Description: "The AWS access key ID for accessing the S3 bucket"
        NoEcho: true
        MinLength: 16
        MaxLength: 128

  # S3 Secret Access Key from S3.yaml
    S3SecretAccessKey:
        Type: String
        Description: "The AWS secret access key for accessing the S3 bucket"
        NoEcho: true
        MinLength: 16
        MaxLength: 128

Resources:
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                            VPC                                   ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: '10.0.0.0/22'
            EnableDnsSupport: true      # Allows DNS resolution inside the VPC
            EnableDnsHostnames: true    # Assigns DNS hostnames to instances


    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                       Internet Gateway                           ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # Note: Internet Gateway allows public subnets (e.g., ALB) to send/receive traffic from the internet
    # Without an IGW, resources in the VPC cannot be accessed from or reach out to the internet.
    InternetGateway:                
        Type: 'AWS::EC2::InternetGateway'
        Properties: {}
    
    # Connects the gateway to the VPC
    # Makes the Internet Gateway usable for that VPC.
    VPCGatewayAttachment:           
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway
    
    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                            Subnets                               ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################

    ##########################################################################
    ####                           ALB Subnets                            ####
    ##########################################################################
    # An Application Load Balancer needs to span two public subnets for high-availability
    # Public Subnet ALB 1
    SubnetALB1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: '10.0.0.0/24'
            AvailabilityZone: !Select [0, !GetAZs '']    # GetAZs '' Returns a list of all AZs available in the region where I'm launching this stack. Select picks one item from that list.
            MapPublicIpOnLaunch: true                    # Automatically assign public IPs to resources
            Tags:
                -   Key: Name
                    Value: SubnetALB1
    
    # Public Subnet ALB 2
    SubnetALB2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: '10.0.1.0/24'
            AvailabilityZone: !Select [1, !GetAZs '']
            MapPublicIpOnLaunch: true
            Tags:
                -   Key: Name
                    Value: SubnetALB2

    ##########################################################################
    ####                           EC2 Subnets                            ####
    ##########################################################################
    # Private subnets for EC2s are in 10.0.2.0/24
    # Private Subnet EC2s 1
    PrivateSubnetApp1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: '10.0.2.0/25' # first half of 10.0.2.0/24
            AvailabilityZone: !Select [0, !GetAZs '']
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: PrivateSubnetApp1
  
    # Private Subnet EC2s 1
    PrivateSubnetApp2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: '10.0.2.128/25' # second half of 10.0.2.0/24
            AvailabilityZone: !Select [1, !GetAZs '']
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: PrivateSubnetApp2

    ##########################################################################
    ####                           RDS Subnets                            ####
    ##########################################################################
    # For high availability, RDS can create a primary DB in one Availability Zone and a standby replica in another AZ.
    # Private subnets for RDSs are in 10.0.3.0/24
    # Private Subnet RDS 1
    PrivateSubnetDB1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: '10.0.3.0/25' # first half of 10.0.3.0/24
            AvailabilityZone: !Select [0, !GetAZs '']
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: PrivateSubnetDB1

    # Private Subnet RDS 2
    PrivateSubnetDB2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: '10.0.3.128/25' # second half of 10.0.3.0/24
            AvailabilityZone: !Select [1, !GetAZs '']
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: PrivateSubnetDB2

    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                          Elastic IP                              ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # This EIP provides a static public IP that the NAT Gateway will use to send outbound traffic to the internet. 
    # Without it, instances in private subnets can’t reach the internet.
    NatEIP:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc     # Ensures the Elastic IP is created in the VPC domain (not EC2-Classic)

    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                        Nat Gateway                               ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # The NAT Gateway allows instances in private subnets to access the internet (e.g., to download updates or connect to AWS services) 
    # while keeping them unreachable from the public internet. It sits in a public subnet (ALB Subnets) with a static Elastic IP and forwards outbound traffic from private subnets.
    NatGateway:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatEIP.AllocationId       # Links the NAT Gateway to the Elastic IP created above
            SubnetId: !Ref SubnetALB1                       # NAT Gateway must be in a public subnet; using SubnetALB1
            Tags:
                -   Key: Name
                    Value: NATGateway
    

    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                        Route Tables                              ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # By default, once a VPC is created, a main route table is also created, and all new subnets are associated with it unless a custom one is attached
    # These are custom ones
    # These Route Tables aren't connected yet
    # This route table will be used by public subnets (ALB1, ALB2) to allow inbound and outbound internet traffic via the Internet Gateway.
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: PublicRouteTable
    
    # This route table will be used by the private EC2 subnets (App1 and App2) to allow outbound internet access through the NAT Gateway.
    PrivateAppRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: PrivateAppRouteTable
    

    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                        Route Rules                               ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # These connect the Route Tables above to their respective Route Rules
    # This default route allows resources in public subnets to send outbound traffic to the internet and receive inbound traffic.
    PublicDefaultRoute:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment                 # Ensures IGW is attached before creating the route
        Properties:
            RouteTableId: !Ref PublicRouteTable         # Attaches to PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0             # All IPv4 traffic
            GatewayId: !Ref InternetGateway             # Sends traffic to Internet Gateway

    # This default route sends all outbound traffic from private EC2 instances to the NAT Gateway in the public subnet. This allows internet access for software updates, package installations, etc., while remaining private.
    PrivateAppDefaultRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateAppRouteTable     # Attaches to PrivateAppRouteTable
            DestinationCidrBlock: 0.0.0.0/0             # All IPv4 traffic
            NatGatewayId: !Ref NatGateway               # Send traffic to NAT Gateway
    

    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                Subnet Route Table Association                    ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # This associates/links each Subnet created to their respective Route Table
    # SubnetALB1 -> PublicRouteTable
    PublicSubnetALB1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref SubnetALB1
            RouteTableId: !Ref PublicRouteTable
        
    # SubnetALB2 -> PublicRouteTable
    PublicSubnetALB2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref SubnetALB2
            RouteTableId: !Ref PublicRouteTable

    # PrivateSubnetApp1 -> PrivateAppRouteTable
    PrivateSubnetApp1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetApp1
            RouteTableId: !Ref PrivateAppRouteTable
        
    # PrivateSubnetApp2 -> PrivateAppRouteTable
    PrivateSubnetApp2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetApp2
            RouteTableId: !Ref PrivateAppRouteTable


    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####               Network Access Control Lists (NACLs)               ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # A subnet firewall. Explicitly states what traffic is allowed to come in a subnet
    # These do not have rules yet.
    # These aren't connected to their subnets yet
    # Stateless firewall for Public Subnets (ALB1 and ALB2)
    PublicNACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: PublicNACL
    
    # Stateless firewall for Private EC2 Subnets (App1 and App2)
    PrivateAppNACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: PrivateAppNACL

    # Stateless firewall for Private RDS Subnets (DB1 and DB2)
    PrivateDBNACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: PrivateDBNACL
    
    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####           Network Access Control Lists (NACLs) RULES             ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # A rule is created for an NACL instance

    ##########################################################################
    ####                    SubnetALB (PublicNACL) Rules                  ####
    ##########################################################################
    # Inbound HTTP (port 80)
    PublicNACLInboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNACL
            RuleNumber: 100
            Protocol: 6                    # 6 = TCP
            RuleAction: allow
            Egress: false                  # false = inbound; true = outbound
            CidrBlock: 0.0.0.0/0           # Allow from anywhere
            PortRange:
                From: 80
                To: 80

    # Inbound HTTPS (port 443)
    PublicNACLInboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 443
                To: 443

    # Ephemeral ports are temporary, high-numbered TCP ports (usually 1024–65535) that your OS automatically assigns for return traffic in a client-server connection.
    # Without allowing ephemeral ports, return traffic gets blocked, even if you allow HTTP/HTTPS.

    # Inbound Ephemeral Ports (for return traffic from clients)
    PublicNACLInboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNACL
            RuleNumber: 120
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535

    # Outbound HTTP
    PublicNACLOutboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 80
                To: 80

    # Outbound HTTPS
    PublicNACLOutboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 443
                To: 443

    # Outbound Ephemeral Ports
    PublicNACLOutboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNACL
            RuleNumber: 120
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
    
    ##########################################################################
    ####               PrivateSubnetApp (PrivateAppNACL) Rules            ####
    ##########################################################################
    # Inbound traffic from ALB (HTTP)
    PrivateAppNACLInboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow           # ALB is in public subnets, so allow traffic from those CIDR blocks
            Egress: false
            CidrBlock: 10.0.0.0/23      # Covers SubnetALB1 (10.0.0.0/24) and SubnetALB2 (10.0.1.0/24)
            PortRange:
                From: 80
                To: 80

    # Inbound HTTPS from ALB
    PrivateAppNACLInboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.0.0/23
            PortRange:
                From: 443
                To: 443

    # Inbound Ephemeral Ports for response traffic
    PrivateAppNACLInboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 120
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.0.0/22      # Allow responses from NAT and RDS within VPC; Basically the entire VPC
            PortRange:
                From: 1024
                To: 65535

    # Outbound HTTP to NAT Gateway (internet access)
    PrivateAppNACLOutboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: true
            # NAT Gateway is in public subnet 10.0.0.0/23
            CidrBlock: 10.0.0.0/23
            PortRange:
                From: 80
                To: 80

    # Outbound HTTPS to NAT Gateway
    PrivateAppNACLOutboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.0.0/23
            PortRange:
                From: 443
                To: 443

    # Outbound to RDS subnets (for DB connections)
    PrivateAppNACLOutboundDB:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 120
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.3.0/24  # Both DB subnets combined
            PortRange:
                From: 3306
                To: 3306

    # Outbound Ephemeral Ports for response traffic
    PrivateAppNACLOutboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateAppNACL
            RuleNumber: 130
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.0.0/22
            PortRange:
                From: 1024
                To: 65535
    
    ##########################################################################
    ####               PrivateSubnetDB (PrivateDBNACL) Rules              ####
    ##########################################################################
    # Inbound MySQL traffic from Private EC2 subnets
    PrivateDBNACLInboundDB:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateDBNACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.2.0/24          # Covers both PrivateSubnetApp1 and PrivateSubnetApp2
            PortRange:
                From: 3306
                To: 3306

    # Inbound Ephemeral Ports for return traffic
    PrivateDBNACLInboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateDBNACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.2.0/24
            PortRange:
                From: 1024
                To: 65535

    # Outbound Ephemeral Ports for response traffic
    PrivateDBNACLOutboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateDBNACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.2.0/24          # Allow responses to the App subnets
            PortRange:
                From: 1024
                To: 65535

    # Outbound MySQL (if needed for replication/monitoring)
    PrivateDBNACLOutboundDB:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateDBNACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.2.0/24
            PortRange:
                From: 3306
                To: 3306

    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####       Network Access Control Lists (NACLs) Associations          ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # This connects each Subnet to their respective NACL
    # SubnetALB1 -> PublicNACL
    PublicNACLAssociationSubnetALB1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref SubnetALB1
            NetworkAclId: !Ref PublicNACL

    # SubnetALB2 -> PublicNACL
    PublicNACLAssociationSubnetALB2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref SubnetALB2
            NetworkAclId: !Ref PublicNACL

    # PrivateSubnetApp1 -> PrivateAppNACL
    PrivateAppNACLAssociationSubnetApp1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetApp1
            NetworkAclId: !Ref PrivateAppNACL

    # PrivateSubnetApp2 -> PrivateAppNACL
    PrivateAppNACLAssociationSubnetApp2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetApp2
            NetworkAclId: !Ref PrivateAppNACL

    # PrivateSubnetDB1 -> PrivateDBNACL
    PrivateDBNACLAssociationSubnetDB1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetDB1
            NetworkAclId: !Ref PrivateDBNACL

    # PrivateSubnetDB2 -> PrivateDBNACL
    PrivateDBNACLAssociationSubnetDB2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnetDB2
            NetworkAclId: !Ref PrivateDBNACL

    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                        Security Groups                           ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # These are firewalls installed on a resource, NOT subnet
    # ALB Security Group
    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for Application Load Balancer
            VpcId: !Ref VPC
            SecurityGroupIngress:
                # Allow inbound HTTP
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                # Allow inbound HTTPS
                -   IpProtocol: tcp
                    FromPort: 443
                    ToPort: 443
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                # Allow all outbound traffic (needed for ALB to talk to targets)
                -   IpProtocol: -1
                    FromPort: 0
                    ToPort: 0
                    CidrIp: 0.0.0.0/0
            Tags:
                -   Key: Name
                    Value: ALBSecurityGroup
    
    # EC2 Security Group
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for application EC2 instances
            VpcId: !Ref VPC
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    SourceSecurityGroupId: !Ref ALBSecurityGroup    # Only ALB can talk to EC2 on HTTP
                -   IpProtocol: tcp
                    FromPort: 443
                    ToPort: 443
                    SourceSecurityGroupId: !Ref ALBSecurityGroup    # Only ALB can talk to EC2 on HTTPS
            SecurityGroupEgress:
                -   IpProtocol: -1
                    FromPort: 0
                    ToPort: 0
                    CidrIp: 0.0.0.0/0                               # Allow all outbound traffic
            Tags:
                -   Key: Name
                    Value: EC2SecurityGroup

    # RDS Security Group
    RDSSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for RDS database
            VpcId: !Ref VPC
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 3306
                    ToPort: 3306
                    SourceSecurityGroupId: !Ref EC2SecurityGroup  # Only EC2 can talk to RDS
            SecurityGroupEgress:
                -   IpProtocol: -1
                    FromPort: 0
                    ToPort: 0
                    CidrIp: 0.0.0.0/0  # Allow outbound if needed for monitoring/replication
            Tags:
                -   Key: Name
                    Value: RDSSecurityGroup

    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                IAM Roles and Instance Profiles                   ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # IAM Role for EC2
    EC2IAMRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: TheHairCollectiveEC2Role
            AssumeRolePolicyDocument:                                       # This is the trust policy. It allows EC2 instances (the service ec2.amazonaws.com) to assume this role using sts:AssumeRole.
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: ec2.amazonaws.com
                        Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy       # AWS managed policy for basic EC2 access to CloudWatch (logs, metrics)
                - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess          # Policy for PM2 to publish logs directly to CloudWatch
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore      # Allow to enter one of the EC2 instances
            Policies:
                -   PolicyName: TheHairCollectiveEC2S3Access                # Allows the EC2 to access/read objects in the mentioned S3
                    PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: Allow
                            Action:
                                - s3:GetObject
                            Resource: !Sub "arn:aws:s3:::the-hair-collective-bucket/*"
                    # The AWS CLI inside the EC2 will seamlessly use the role’s temporary credentials. (The bucket’s policy doesn’t block it — it only enforces TLS.)

    # Instance Profile to attach Role to EC2; attached to EC2IAMRole  
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: TheHairCollectiveEC2InstanceProfile
            Roles:
                -   !Ref EC2IAMRole

                
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                  RDS Database Instance                           ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # RDS Instance
    TheHairCollectiveRDSInstance:
        Type: AWS::RDS::DBInstance
        DeletionPolicy: Delete                                      # Skips snapshot on stack deletion
        Properties:
            DBInstanceIdentifier: the-hair-collective-db            # Logical DB name
            AllocatedStorage: 20                                    # Storage in GB
            MaxAllocatedStorage: 100                                # Autoscale storage up to 100 GB
            DBInstanceClass: db.t3.micro                            # Small instance type for cost-efficiency
            Engine: mysql                                           # MySQL engine
            EngineVersion: "8.0.35"                                 # Specific version for consistency
            MasterUsername: admin                                   # Admin user
            MasterUserPassword: !Ref DBPassword                     # Should be a secure parameter
            # You might think it makes two separate DB instances, but CloudFormation creates just one RDS.
            # Multi-AZ means AWS creates a single RDS cluster with a primary and a standby automatically spread across the two subnets in the DBSubnetGroup.
            MultiAZ: true                                           # Enables standby in 2nd AZ
            StorageEncrypted: true                                  # Encrypts data at rest
            BackupRetentionPeriod: 7                                # Automated backups for 7 days
            PreferredBackupWindow: "03:00-04:00"                    # Daily backup window (UTC)
            PreferredMaintenanceWindow: "sun:04:00-sun:05:00"       # Weekly maintenance window (UTC)
            AutoMinorVersionUpgrade: true                           # Enable automatic minor version upgrades
            PubliclyAccessible: false                               # Keeps DB private
            CopyTagsToSnapshot: true                                # Propagate tags to snapshots
            VPCSecurityGroups:
                -   !Ref RDSSecurityGroup                           # Only EC2 can access
            DBSubnetGroupName: !Ref DBSubnetGroup                   # Ensures DB uses the private DB subnets; attached from DBSubnetGroup
            DBParameterGroupName: !Ref DBParameterGroup             # Uses a DB Parameter group
            DeletionProtection: false                              
            Tags:
                -   Key: Name
                    Value: TheHairCollectiveRDSInstance

    # Parameter group for the RDS instances (Attached to TheHairCollectiveRDSInstance)
    DBParameterGroup:
        Type: AWS::RDS::DBParameterGroup
        Properties:
            Description: "Parameter group for The Hair Collective MySQL RDS"
            Family: "mysql8.0"                                                  # Must match MySQL engine version
            Parameters:
                time_zone: "US/Central"                                         # Sets DB instance time zone
                event_scheduler: "ON"                                           # Enables scheduled events (e.g., from tables)
            Tags:
                -   Key: Name
                    Value: TheHairCollectiveDBParameterGroup

    # Subnet group of the RDS instance (Attach this RDS to the PrivateSubnetDBs)
    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: Subnet group for TheHairCollectiveRDSInstance
            SubnetIds:
                -   !Ref PrivateSubnetDB1
                -   !Ref PrivateSubnetDB2
            Tags:
                -   Key: Name
                    Value: TheHairCollectiveDBSubnetGroup


    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                        EC2 Launch Template                       ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # A “blueprint” that describes how web server EC2 instances should look (OS image, instance type, security groups, startup script, disk size).
    TheHairCollectiveLaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateName: TheHairCollectiveAppLaunchTemplate  
            LaunchTemplateData:
                ImageId: !Ref LatestAmiId
                InstanceType: t3.micro                                          # Instance size/type (low-cost general purpose)
                IamInstanceProfile:
                Arn: !GetAtt EC2InstanceProfile.Arn                             # Links EC2 to IAM instance profile (for S3, CloudWatch access)    
                NetworkInterfaces:
                    -   AssociatePublicIpAddress: false                         # Ensures instance gets no public IP (private subnet)
                        DeviceIndex: 0                                          # Primary network interface
                        Groups:
                    -   !Ref EC2SecurityGroup                                   # Security group for controlling inbound/outbound traffic
                UserData: !Base64 |                                             # Startup script that runs when instance launches
                    #!/bin/bash
                    set -e

                    # Update and install dependencies
                    yum update -y
                    yum install -y python3 python3-pip python3-venv unzip nginx nodejs npm aws-cli

                    # Create application directory
                    mkdir -p /opt/TheHairCollective

                    # Download application zip from S3 (role-based, no access keys needed)
                    aws s3 cp s3://the-hair-collective-bucket/TheHairCollective.zip /tmp/TheHairCollective.zip
                    unzip -o /tmp/TheHairCollective.zip -d /opt/

                    # ---------------------------
                    # Backend (Flask + Gunicorn)
                    # ---------------------------
                    cd /opt/TheHairCollective/backend

                    python3 -m venv venv
                    source venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    pip install gunicorn
                    deactivate

                    # ---------------------------
                    # Frontend (React)
                    # ---------------------------
                    cd /opt/TheHairCollective/frontend
                    npm install
                    npm run build

                    # ---------------------------
                    # Nginx config
                    # ---------------------------
                    cat > /etc/nginx/conf.d/thehaircollective.conf << 'EOF'
                    server {
                        listen 80;

                        location /api/ {
                            proxy_pass http://127.0.0.1:5000;
                            proxy_http_version 1.1;
                            proxy_set_header Upgrade $http_upgrade;
                            proxy_set_header Connection 'upgrade';
                            proxy_set_header Host $host;
                            proxy_cache_bypass $http_upgrade;
                        }

                        location / {
                            root /opt/TheHairCollective/frontend/build;
                            index index.html;
                            try_files $uri /index.html;
                        }
                    }
                    EOF

                    rm -f /etc/nginx/conf.d/default.conf || true
                    systemctl enable nginx
                    systemctl restart nginx

                    # ---------------------------
                    # PM2 + CloudWatch Logs
                    # ---------------------------
                    npm install -g pm2 pm2-cloudwatch

                    pm2 set pm2-cloudwatch:logGroupName "/thehaircollective/app/logs"
                    pm2 set pm2-cloudwatch:logStreamName "backend"
                    pm2 set pm2-cloudwatch:region "${AWS::Region}"
                    pm2 module:install pm2-cloudwatch || true

                    # ---------------------------
                    # Start backend with PM2
                    # ---------------------------
                    cd /opt/TheHairCollective/backend
                    source venv/bin/activate
                    pm2 start "gunicorn -b 0.0.0.0:5000 src.app:app" --name "thehaircollective-backend"
                    deactivate

                    pm2 save
                    pm2 startup systemd -u ec2-user --hp /home/ec2-user
                BlockDeviceMappings:
                    -   DeviceName: /dev/xvda                               # Root volume device name
                        Ebs:
                        VolumeSize: 20                                      # Disk size (20 GB)
                        VolumeType: gp3                                     # General-purpose SSD
                        DeleteOnTermination: true                           # Deletes volume when instance is terminated
                TagSpecifications:
                    -   ResourceType: instance                              # Applies tags to EC2 instances launched
                        Tags:
                            -   Key: Name
                                Value: TheHairCollectiveAppServer           # Name tag for easy identification

    
    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####              Application Load Balancer (ALB)                     ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################

    ##########################################################################
    ####          Application Load Balancer (ALB) Target Group            ####
    ##########################################################################
    # A group that keeps track of which EC2 instances can receive traffic. It checks their health (are they alive and responding?).
    TheHairCollectiveTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: TheHairCollectiveAppTargetGroup               # Name for identifying this target group
            Protocol: HTTP                                      # Protocol the ALB uses to communicate with EC2
            Port: 80                                            # Port where your EC2 instances listen (HTTP)
            TargetType: instance                                # Targets are EC2 instances (not IPs or Lambda)
            VpcId: !Ref VPC                                     # VPC where your EC2 instances and ALB exist
            HealthCheckProtocol: HTTP                           # Protocol for health checks
            HealthCheckPort: traffic-port                       # Uses the same port as the target group (80)
            HealthCheckPath: /                                  # ALB will check this path for instance health
            HealthCheckIntervalSeconds: 30                      # Interval between health checks (default: 30s)
            HealthCheckTimeoutSeconds: 5                        # Time to wait for a response before marking unhealthy
            HealthyThresholdCount: 3                            # Number of consecutive successful checks to mark healthy
            UnhealthyThresholdCount: 2                          # Number of consecutive failed checks to mark unhealthy
            Matcher:                                            # Response code matcher for health checks
                HttpCode: 200-399                               # Consider 2xx and 3xx as healthy
            Tags:
                -   Key: Name
                    Value: TheHairCollectiveTargetGroup         # Tag for easier identification
    
    ##########################################################################
    ####                    Auto Scaling Group                            ####
    ##########################################################################
    # ASG requires a launch template and knows which Target Group(s) to attach instances to.
    # Registers these EC2 instances in the Target Group, so they start receiving traffic automatically.
    TheHairCollectiveAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            AutoScalingGroupName: TheHairCollectiveAppASG                               # Name of the ASG for identification
            VPCZoneIdentifier:                                                          # Subnets where EC2 instances will be launched
                -   !Ref PrivateSubnetApp1                                              # First private subnet
                -   !Ref PrivateSubnetApp2                                              # Second private subnet for HA
            LaunchTemplate:                                                             # Reference to the previously defined Launch Template
                LaunchTemplateId: !Ref TheHairCollectiveLaunchTemplate                  # ID of the launch template
                Version: !GetAtt TheHairCollectiveLaunchTemplate.LatestVersionNumber    # Ensures it uses the latest template version
            MinSize: 1                                                                  # Minimum number of running EC2 instances
            MaxSize: 2                                                                  # Maximum number of running EC2 instances
            DesiredCapacity: 1                                                          # Target number of running instances at launch
            TargetGroupARNs:                                                            # ALB Target Groups to register instances
                -   !Ref TheHairCollectiveTargetGroup                                   # Associates ASG with the HTTP target group
            HealthCheckType: ELB                                                        # Health checks based on ELB instance status
            HealthCheckGracePeriod: 300                                                 # Seconds to wait before checking instance health
            MetricsCollection:                                                          # Enables monitoring for scaling decisions
                -   Granularity: "1Minute"                                              # Collect metrics every minute
            Tags:                                                                       # Tags applied to all instances launched by ASG
                -   Key: Name
                    Value: TheHairCollectiveAppServer
                    PropagateAtLaunch: true                                             # Ensures the tag is applied to new instances

    # Auto Scaling Policy
    # If traffic spikes → CPU goes above 50% → ASG launches another EC2 (up to MaxSize: 2 in your stack).
    # If traffic drops → CPU goes below 50% → ASG terminates an instance (but never below MinSize: 1).                           
    NoteStripScalingPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AutoScalingGroupName: !Ref TheHairCollectiveAutoScalingGroup
            PolicyType: TargetTrackingScaling
            TargetTrackingConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: ASGAverageCPUUtilization
                TargetValue: 50.0               # Keep average CPU around 50%

    ##########################################################################
    ####                            ALB                                   ####
    ##########################################################################
    # A single public endpoint (internet-facing) that receives HTTP requests from users.
    # ALB can only forward traffic to an existing Target Group
    # Uses the Target Group to forward incoming requests to healthy EC2 servers running in the private subnets.
    TheHairCollectiveALB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: TheHairCollectiveAppALB                               # Name of the ALB for identification
            Type: application                                           # Specifies it’s an Application Load Balancer
            Scheme: internet-facing                                     # Accessible from the internet (public-facing)
            IpAddressType: ipv4                                         # Uses IPv4 addressing
            Subnets:                                                    # ALB must span at least 2 public subnets
                - !Ref SubnetALB1
                - !Ref SubnetALB2
            SecurityGroups:                                             # Security group controlling inbound/outbound traffic
                - !Ref ALBSecurityGroup
            LoadBalancerAttributes:                                     # Configures additional ALB settings
                -   Key: idle_timeout.timeout_seconds
                    Value: "60"                                         # Time (seconds) before closing idle connections
                -   Key: deletion_protection.enabled
                    Value: "false"                                      # Prevent accidental deletion (disabled here)
            Tags:
                -   Key: Name
                    Value: TheHairCollectiveALB                         # Tag for easier identification

    # ALB HTTP Listener
    # A rule inside the ALB that listens on port 80 for HTTP traffic.
    # For every request coming in, it forwards it to the Target Group, which then sends it to one of the EC2 instances.
    TheHairCollectiveALBListenerHTTP:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref TheHairCollectiveALB                      # The ALB this listener is attached to
            Port: 80                                                        # Listens for HTTP traffic on port 80
            Protocol: HTTP                                                  # Protocol for this listener
            DefaultActions:                                                 # What to do with requests that don’t match any rule
                -   Type: forward                                           # Forward traffic to a target group
                    TargetGroupArn: !Ref TheHairCollectiveTargetGroup       # The target group to forward to

    # Flow Summary
    # User hits ALB → Listener receives HTTP request → ALB checks Target Group for healthy EC2 → Sends traffic to one of the EC2 servers →
    # Auto Scaling Group manages adding/removing EC2 servers using the Launch Template → Every new EC2 is automatically put into the Target Group.

    ##########################################################################
    ##########################################################################
    ####                                                                  ####
    ####                        CloudWatch                                ####
    ####                                                                  ####
    ##########################################################################
    ##########################################################################
    # Alarm
    # Creates an SNS topic.
    TheHairCollectiveAlarmTopic:
        Type: AWS::SNS::Topic                       # When an alarm triggers, CloudWatch sends a message to this topic.
        Properties:                                 # Subscribe an email or SMS to this topic (outside this YAML, in AWS Console or another resource). Then, if the alarm fires, get an email/SMS.
            DisplayName: NoteStripAlarmTopic        # In the AWS Console → SNS → Subscriptions, add email and confirm it.

    # This monitors the average CPU usage of EC2 instances (via the Auto Scaling Group). If it stays too high, the alarm fires.
    EC2HighCPUAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: "Alarm if EC2 CPU > 80% for 5 minutes"
            Namespace: AWS/EC2                                                # Tells CloudWatch to look at EC2 metrics.
            MetricName: CPUUtilization                                        # the specific metric (CPU usage in %).
            Dimensions:                                                       # Here it filters by the Auto Scaling Group name, so it only tracks the EC2 instances managed by ASG.
                -   Name: AutoScalingGroupName
                    Value: !Ref TheHairCollectiveAutoScalingGroup
            Statistic: Average                                                # looks at the average CPU value.
            Period: 300                                                       # Each data point is a 5-minute window (300 seconds).
            EvaluationPeriods: 1                                              # it only needs one period over the threshold to trigger (so, 5 minutes straight of high CPU).
            Threshold: 80                                                     # the alarm triggers if CPU > 80%.
            ComparisonOperator: GreaterThanThreshold                          # trigger if CPU is greater than 80
            AlarmActions:
                -   !Ref TheHairCollectiveAlarmTopic

    # Log Group
    TheHairCollectiveLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: /thehaircollective/app/logs               # Log group name
            RetentionInDays: 14                                     # Keep logs for 14 days


Outputs:
    # RDS Endpoint
    DBHost:
        Description: "RDS MySQL endpoint hostname"
        Value: !GetAtt TheHairCollectiveRDSInstance.Endpoint.Address

    # RDS Port
    DBPort:
        Description: "RDS MySQL port"
        Value: !GetAtt TheHairCollectiveRDSInstance.Endpoint.Port